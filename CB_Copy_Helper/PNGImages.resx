<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        Cv8gGRb/IBkW/ysgG/9LMyv/ZEM1/11AM/9rSDv/ZD4z/1A5Mf9BLyf/MScj/xwiLv9KZnT/Z9Hn/2X0
        //9l/f//Zf/8/2X//P9l//X/Zf/w/2X/7P9l/+f/Zf/k/x9PRf8IHBfpJgsfuB4MGv//auT//2rn//9q
        6//4d+v/QjU9/x0UEP8dFBD/LiMf/zMmIP9BMCf/RjIo/0s0Kv9BMCr/MiUf/yQbF/8vLTb/WW6Y/2q7
        /f9q1P//aub//2ry//9q+v//avr//2r//v9q//r/av/2/2r/8v9q/+7/DB4c/wsmIbgUBhJGBgEF/qtL
        n///cPD//3D0//9w+f/lgOP/MCAr/zAgK/8kGhb/MiUg/y0jHv8xIx7/Kx4a/yUbGP8tKDD/Y2Ka/29+
        7/9wmP//cLH//3DG//9w2P//cOf//3Dw//9w8P//cPn//3D9//9w//3/cP/5/0urpf8BBgb+BhQTRgAA
        AAAfCRzgQB09//919///dfr//3X+//x1///gc+f/4HPn/41Zkv9mR2n/VUBV/1tEZv9qVoH/dmOs/39z
        6v91df//dYP//3WU//91qf//db3//3XO//912///dej//3Xo//918P//dfb//3X8//91////HUA//wkf
        HuAAAAAAAAAAAB0IHG0HAQf9pU6j//95///7ef//9nn//+95///vef//5nn//9p5///Lef//u3n//6h5
        //+Wef//hXn//3l5//95hP//eZP//3mk//95tv//ecb//3nT//953v//ed7//3np//958P//efX//06i
        pf8BBwf9CB0dbQAAAAAAAAAAHQgcbQcBB/2lTqP//3n///t5///2ef//73n//+95///mef//2nn//8t5
        //+7ef//qHn//5Z5//+Fef//eXn//3mE//95k///eaT//3m2//95xv//edP//3ne//953v//een//3nw
        //959f//TqKl/wEHB/0IHR1tAAAAAAAAAAAAAAAAIwojyioVKv/7fv//9X7///B+///ofv//6H7//95+
        ///Sfv//xH7//7V+//+lfv//lX7//4h+//9+fv//fof//36T//9+ov//frH//36///9+zP//ftf//37X
        //9+4f//fun//37w//8VKCr/CiIjygAAAAAAAAAAAAAAAAAAAAAAAAAAHAkd6EonTf/wgf//6IH//+GB
        ///hgf//1oH//8yB//+/gf//sYH//6OB//+Vgf//iYH//4GB//+Bif//gZT//4Gg//+Brf//gbr//4HG
        //+B0f//gdH//4Ha//+B4v//J0dN/wkaHegAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASBRNCFwcZ7kco
        Tf/jhf//24X//9uF///Rhf//x4X//7uF//+uhf//ooX//5aF//+Mhf//hYX//4WM//+Flf//hZ///4Wr
        //+Ft///hcL//4XM//+FzP//hdX//yhDTf8HFRnuBRETQgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAARBRNCGAkd6CUWKv+KWKX/ilil/8yI///CiP//uIj//62I//+hiP//loj//4+I//+IiP//iI7//4iW
        //+In///iKr//4i0//+Ivv//WIGl/1iBpf8WIir/CRYd6AUQE0IAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAGwojygUBB/0FAQf9MiNA/4Bdq/+1iv//q4r//6CK//+Yiv//j4r//4qK
        //+Kj///ipf//4qf//+KqP//XXer/yMvQP8BBAf9AQQH/QoYI8oAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFAgdbRQIHW0UCR/gAwEG/hUQHv80K0//V0uL/3Rr
        xf+Gge//gYHv/2tuxf9LUov/KzFP/xATHv8BAwb+CREf4AgSHW0IEh1tAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALBhRGEwsmuAwI
        HOkEAwz6AQEE/wAAAP8AAAD/AQEE/wMEDPoICxzpCxEmuAYKFEYAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/8AD//4AAH/8AAA/8AAAD+AAAAfgAAAHwAAAA4AAAAGAAAABgAAAAQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAABgAAAAcAA
        AAPgAAAH4AAAB/AAAA/8AAA//gAAf//AA/8=
</value>
  </data>
</root>